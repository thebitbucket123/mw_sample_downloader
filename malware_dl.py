#! python3

import requests
import sys
import os
from stat import S_IWRITE
import configparser
import argparse


def read_conf(filename):
	config = configparser.ConfigParser(allow_no_value=True)
	config.read(filename)
	
	cfg = {}
	tmp = []
	
	#Section::Defaults
	cfg['DEFAULT_DL_PATH'] = config.get('defaults','download_path')
	
	#Section::Virusign
	cfg['VSIGN_ENABLED'] = config.getboolean('virusign','enable')
	if cfg['VSIGN_ENABLED']:
		cfg['VSIGN_PRIORITY'] = config.getint('virusign','priority')
		tmp.append(['Virusign',cfg['VSIGN_PRIORITY']])
		cfg['VSIGN_URL_STEM'] = config.get('virusign','url_stem')
		cfg['VSIGN_URL_SUFFIX'] = config.get('virusign','url_suffix')
	
	#Section::VirusShare
	cfg['VS_ENABLED'] = config.getboolean('virusshare', 'enable')
	if cfg['VS_ENABLED']:
		cfg['VS_URL_STEM'] = config.get('virusshare','url_stem')
		cfg['VS_PRIORITY'] = config.getint('virusshare','priority')
		tmp.append(['VirusShare',cfg['VS_PRIORITY']])
		cfg['VS_COOKIE'] = config.get('virusshare','cookie_str')
		cfg['VS_USER_AGENT'] = config.get('virusshare','user_agent_str')
		cfg['VS_ACCEPT'] = config.get('virusshare', 'accept_str')
	
	#Section::VirusTotal
	cfg['VT_ENABLED'] = config.getboolean('virustotal', 'enable')
	if cfg['VT_ENABLED']:
		cfg['VT_PRIORITY'] = config.getint('virustotal','priority')
		tmp.append(['VirusTotal',cfg['VT_PRIORITY']])
		cfg['VT_API_URL'] = config.get('virustotal','url')
		cfg['VT_API_KEY'] = config.get('virustotal','api_key')
	
	#Section::Viper
	cfg['VIPER_ENABLED'] = config.getboolean('viper', 'enable')
	if cfg['VIPER_ENABLED']:
		cfg['VIPER_API_URL'] = config.get('viper','url')
		cfg['VIPER_AUTH_KEY'] = config.get('viper','auth_key')
	
	#Build the Source Priority ordered list
	cfg['SRC_PRIORITY_LIST'] = sorted(tmp,key = lambda x: x[1])
	if DEBUG: 
		print(cfg['SRC_PRIORITY_LIST'])
		input("Press Enter to continue...")

	return cfg

def save_file(cfg, outpath, bin_content):
	outfile = open(outpath,'wb')
	outfile.write(bin_content)
	outfile.close
	
	return bytes
	
def query_virusign(cfg, hash, OUT_PATH):
	found = 0
	headers = {}
	url = cfg['VSIGN_URL_STEM'] + hash + cfg['VSIGN_URL_SUFFIX']
	r = requests.get(url, headers=headers)
	if DEBUG:
		print(r.url)
		print(r.status_code)
		print(r.headers)
		input("Press enter to continue...")
	if r.status_code is 200:
		outpath = OUT_PATH + "Virusign_" + hash + ".7z"
		outfile = open(outpath,'wb')
		print("\t\tSample found!!! Saving to " + outpath)
		bin_content = r.content
		bytes = save_file(cfg, outpath, bin_content)
		found = 1
	elif r.status_code == 403:
		print("403 Returned. Exiting...")
		sys.exit()
	return found


def query_virusshare(cfg, hash, OUT_PATH):
	found = 0
	headers = {'user-agent':cfg['VS_USER_AGENT'], 'cookie':cfg['VS_COOKIE'], 'accept':cfg['VS_ACCEPT']}
	url = cfg['VS_URL_STEM'] + hash
	r = requests.get(url, headers=headers)
	if DEBUG:
		print(r.url)
		print(r.status_code)
		print(r.headers)
	if r.status_code is 200:
		cd = r.headers['Content-Disposition'].split(';')
		cd_2 = cd[1].split('=')
		outfile_name = cd_2[1]
		outpath = OUT_PATH + outfile_name
		try:
			outfile = open(outpath,'wb')
		except FileNotFoundError as e:
			print(e)
		print("\t\tSample found!!! Saving to " + outpath)
		bin_content = r.content
		bytes = save_file(cfg, outpath, bin_content)
		found = 1
	elif r.status_code == 403:
		print("Your session has expired. Login to the virusshare webgui again. Your cookie value may or may not have changed.")
		print("Exiting...")
		sys.exit()
		
	return found

def query_virustotal(cfg, hash, OUT_PATH):
	found = 0
	headers = {}
	url = cfg['VT_API_URL'] + "apikey="+ cfg['VT_API_KEY'] + "&hash=" + hash
	r = requests.get(url, headers=headers)
	if DEBUG:
		print(r.url)
		print(r.status_code)
		print(r.headers)
		input("Press enter to continue...")
	if r.status_code is 200:
		outpath = OUT_PATH + "VirusTotal_" + hash + ".zip"
		outfile = open(outpath,'wb')
		print("\t\tSample found!!! Saving to " + outpath)
		bin_content = r.content
		bytes = save_file(cfg, outpath, bin_content)
		found = 1
	elif r.status_code == 403:
		print("403 Returned. Exiting...")
		sys.exit()
	else:
		print("Unexpected response: ")
		print(r)
		input("Press enter to continue...")
	return found

parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file', required=True)
parser.add_argument('-o', '--out', help="Specifies folder path to download files to. If not present, default is ./downloads/")
parser.add_argument('-v', '--verbose', action="store_true")
parser.add_argument('-d', '--debug', action="store_true")
args = parser.parse_args()

FILE = args.file
OUT = args.out
VERBOSE = args.verbose
DEBUG = args.debug

cfg = read_conf('malware_dl.conf')

if DEBUG:
	print("DEBUG MODE")
if VERBOSE:
	print("VERBOSE MODE")

if OUT and not os.access(OUT,mode=S_IWRITE):
	try:
		os.mkdir(OUT)
	except FileExistsError:
		if not os.access(OUT,mode=S_IWRITE):
			print("Cannot access output folder: " + OUT + " . Using conf-specified default folder.")
			OUT_DIR = cfg['DEFAULT_DL_PATH']
else:
	OUT_DIR = os.path.join(OUT, '')
	
if not FILE:
	print("No input-file given. Exiting...")
	sys.exit()

#print("Sources enabled in order of priority:")
#for i in cfg['SRC_PRIORITY_LIST']
	
f = open(FILE, 'r')

lines = f.readlines()
num_hashes = str(len(lines))
if DEBUG or VERBOSE: print("Number of hashes to request: " + num_hashes)

vs_cnt = 0
vt_cnt = 0
vsign_cnt = 0
hashes_not_found = []
for line in lines:
	line = line.rstrip()
	print("\nFor hash: " + line)
	found = 0
	for i in range(len(cfg['SRC_PRIORITY_LIST'])):
		if found is 0:
			print("\tQuerying " + cfg['SRC_PRIORITY_LIST'][i][0] + "...")
			
			if cfg['SRC_PRIORITY_LIST'][i][0] == "Virusign":
				found = query_virusign(cfg,line, OUT_DIR)
				if found is 1:
					vsign_cnt = vsign_cnt + 1
			if cfg['SRC_PRIORITY_LIST'][i][0] == "VirusShare":
				found = query_virusshare(cfg,line, OUT_DIR)
				if found is 1:
					vs_cnt = vs_cnt + 1
			if cfg['SRC_PRIORITY_LIST'][i][0] == "VirusTotal":
				found = query_virustotal(cfg,line, OUT_DIR)
				if found is 1:
					vt_cnt = vt_cnt + 1
	if found is 0:
		print("\tNothing found.")
		hashes_not_found.append(line)
	if DEBUG: input("Press enter to continue...")
if DEBUG or VERBOSE: 
	print("\n\t" + str(vs_cnt + vt_cnt + vsign_cnt) + " of " + num_hashes + " were successfully downloaded.")
	print("\t\tFrom Virusign: " + str(vsign_cnt))
	print("\t\tFrom VirusShare: " + str(vs_cnt))
	print("\t\tFrom VirusTotal: " + str(vt_cnt))
	print("\n\tSamples not found for:")
	for h in hashes_not_found:
		print("\t\t" + h)


